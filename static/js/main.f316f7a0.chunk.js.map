{"version":3,"sources":["Components/api/index.js","Components/NavBar/Navbar.js","Components/infoBox/infoBox.js","Components/Chart/chart.js","App.js","reportWebVitals.js","index.js"],"names":["url","fetchData","country","a","changeableURL","axios","get","data","modifiData","confirmed","recovered","deaths","lastUpdate","console","log","fetchDailyData","map","dailyData","total","date","reportDate","countries","name","useStyles","makeStyles","theme","root","flexGrow","background","menuButton","marginRight","spacing","title","display","breakpoints","up","search","position","borderRadius","shape","backgroundColor","alpha","palette","common","white","marginLeft","width","searchIcon","padding","height","pointerEvents","alignItems","justifyContent","inputRoot","color","inputInput","paddingLeft","transition","transitions","create","Navbar","handlCountryChange","useState","fetchedCountry","setfetchedCountry","useEffect","fetchAPI","classes","className","AppBar","Toolbar","FormControl","NativeSelect","defaultValue","onChange","e","target","value","i","minWidth","bullet","margin","transform","fontSize","pos","marginBottom","InfoBox","Card","CardContent","Typography","gutterBottom","start","end","duration","separator","Date","toDateString","variant","component","Chart","setDailyData","lineChart","length","labels","datasets","label","borderColor","fill","Color","barChart","options","legend","text","App","setCountry","vlaue","setData","fetch","getData","handleCountryChange","fetchDataGlobal","countryData","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kXACIA,EAAM,iCAGCC,EAAS,uCAAG,WAAMC,GAAN,qBAAAC,EAAA,6DAEfC,EAAgBJ,EAChBE,IACAE,EAAa,UAAMJ,EAAN,sBAAuBE,IAJrB,kBAQQG,IAAMC,IAAIF,GARlB,uBAQPG,EARO,EAQPA,KACFC,EAAa,CACfC,UAAWF,EAAKE,UAChBC,UAAWH,EAAKG,UAChBC,OAAQJ,EAAKI,OACbC,WAAYL,EAAKK,YAIrBC,QAAQC,IAAIP,GAjBG,kBAkBRC,GAlBQ,4FAAH,sDAuBTO,EAAc,uCAAG,gCAAAZ,EAAA,+EAEGE,IAAMC,IAAN,UAAaN,EAAb,WAFH,uBAEZO,EAFY,EAEZA,KACFC,EAAaD,EAAKS,KAAI,SAACC,GAAD,MAAgB,CACxCR,UAAWQ,EAAUR,UAAUS,MAC/BP,OAAQM,EAAUN,OAAOO,MACzBC,KAAMF,EAAUG,eANA,kBAQbZ,GARa,yFAAH,qDAgBda,EAAS,uCAAG,8BAAAlB,EAAA,+EAGuBE,IAAMC,IAAN,UAAaN,EAAb,eAHvB,uBAGEqB,EAHF,EAGPd,KAASc,UAHF,kBAKRA,EAAUL,KAAI,SAACd,GAAD,OAAaA,EAAQoB,SAL3B,yFAAH,qD,yBCtBdC,EAAYC,aAAW,SAACC,GAAD,MAAY,CAEvCC,KAAM,CACJC,SAAU,EACVC,WAAY,SAEdC,WAAY,CACVC,YAAaL,EAAMM,QAAQ,IAE7BC,MAAM,aACJL,SAAU,EACVM,QAAS,QACRR,EAAMS,YAAYC,GAAG,MAAQ,CAC5BF,QAAS,UAGbG,OAAO,aACLC,SAAU,WACVC,aAAcb,EAAMc,MAAMD,aAC1BE,gBAAiBC,YAAMhB,EAAMiB,QAAQC,OAAOC,MAAO,KACnD,UAAW,CACTJ,gBAAiBC,YAAMhB,EAAMiB,QAAQC,OAAOC,MAAO,MAErDC,WAAY,EACZC,MAAO,QACNrB,EAAMS,YAAYC,GAAG,MAAQ,CAC5BU,WAAYpB,EAAMM,QAAQ,GAC1Be,MAAO,SAGXC,WAAY,CACVC,QAASvB,EAAMM,QAAQ,EAAG,GAC1BkB,OAAQ,OACRZ,SAAU,WACVa,cAAe,OACfjB,QAAS,OACTkB,WAAY,SACZC,eAAgB,UAElBC,UAAW,CACTC,MAAO,WAETC,WAAW,aACTP,QAASvB,EAAMM,QAAQ,EAAG,EAAG,EAAG,GAEhCyB,YAAY,cAAD,OAAgB/B,EAAMM,QAAQ,GAA9B,OACX0B,WAAYhC,EAAMiC,YAAYC,OAAO,SACrCb,MAAO,QACNrB,EAAMS,YAAYC,GAAG,MAAQ,CAC5BW,MAAO,OACP,UAAW,CACTA,MAAO,cAQR,SAASc,EAAT,GAAyC,IAAvBC,EAAsB,EAAtBA,mBAGvB,EAA0CC,mBAAS,IAAnD,mBAAKC,EAAL,KAAqBC,EAArB,KACAC,qBAAU,YACM,uCAAG,sBAAA9D,EAAA,kEACf6D,EADe,SACS3C,IADT,6EAAH,qDAId6C,KACC,CAACF,IACJ,IAAMG,EAAU5C,IAChB,OACE,qBAAK6C,UAAWD,EAAQzC,KAAxB,SACE,cAAC2C,EAAA,EAAD,CAAQhC,SAAS,SAAjB,SACE,eAACiC,EAAA,EAAD,WAOE,oBAAIF,UAAU,SAAd,uCAGA,cAACG,EAAA,EAAD,UACA,eAACC,EAAA,EAAD,CAAcJ,UAAU,UAAUK,aAAa,GAAGC,SAAU,SAACC,GAAD,OAAOd,EAAmBc,EAAEC,OAAOC,QAA/F,UAIE,wBAAQA,MAAM,SAAST,UAAU,SAAjC,oBAGCL,EAAe/C,KAAI,SAACd,EAAS4E,GAAV,OAAgB,wBAAgBD,MAAO3E,EAAvB,SAAiCA,GAApB4E,kB,yDC1GvDvD,EAAYC,YAAW,CACzBE,KAAM,CACFqD,SAAU,KAEdC,OAAQ,CACJ/C,QAAS,eACTgD,OAAQ,QACRC,UAAW,cAEflD,MAAO,CACHmD,SAAU,IAEdC,IAAK,CACDC,aAAc,MAKf,SAASC,EAAT,GAA4B,IAAT/E,EAAQ,EAARA,KAEhB4D,EAAU5C,IACc4C,EAAQa,OAEtC,OACI,eAACO,EAAA,EAAD,CAAMnB,UAAWD,EAAQzC,KAAzB,UACI,eAAC8D,EAAA,EAAD,CAAapB,UAAU,YAAvB,UACI,cAACqB,EAAA,EAAD,CAAYrB,UAAWD,EAAQnC,MAAOsB,MAAM,gBAAgBoC,cAAY,EAAxE,SAEI,sBAAMtB,UAAU,OAAhB,wBAIJ,cAACqB,EAAA,EAAD,CAAYrB,UAAWD,EAAQiB,IAAK9B,MAAM,gBAA1C,SAEI,cAAC,IAAD,CACIqC,MAAO,EACPC,IAAKrF,EAAKE,UAAUoE,MACpBgB,SAAU,IACVC,UAAU,QAGlB,cAACL,EAAA,EAAD,CAAYrB,UAAWD,EAAQnC,MAAOsB,MAAM,gBAAgBoC,cAAY,EAAxE,SACI,sBAAMtB,UAAU,OAAhB,SAAwB,IAAI2B,KAAKxF,EAAKK,YAAYoF,mBAEtD,cAACP,EAAA,EAAD,CAAYQ,QAAQ,QAAQC,UAAU,OAAtC,6DASJ,eAACV,EAAA,EAAD,CAAapB,UAAU,YAAvB,UACI,cAACqB,EAAA,EAAD,CAAYrB,UAAWD,EAAQnC,MAAOsB,MAAM,gBAAgBoC,cAAY,EAAxE,SACI,sBAAMtB,UAAU,QAAhB,yBAGJ,cAACqB,EAAA,EAAD,CAAYrB,UAAWD,EAAQiB,IAAK9B,MAAM,gBAA1C,SAEI,cAAC,IAAD,CACIqC,MAAO,EACPC,IAAKrF,EAAKG,UAAUmE,MAEpBgB,SAAU,IACVC,UAAU,QAGlB,cAACL,EAAA,EAAD,CAAYrB,UAAWD,EAAQnC,MAAOsB,MAAM,gBAAgBoC,cAAY,EAAxE,SACI,sBAAMtB,UAAU,OAAhB,SAAwB,IAAI2B,KAAKxF,EAAKK,YAAYoF,mBAEtD,cAACP,EAAA,EAAD,CAAYQ,QAAQ,QAAQC,UAAU,OAAtC,yDAQJ,eAACV,EAAA,EAAD,CAAapB,UAAU,SAAvB,UACI,eAACqB,EAAA,EAAD,CAAYrB,UAAWD,EAAQnC,MAAOsB,MAAM,gBAAgBoC,cAAY,EAAxE,UACI,sBAAMtB,UAAU,MAAhB,oBADJ,sBAGA,cAACqB,EAAA,EAAD,CAAYrB,UAAWD,EAAQiB,IAAK9B,MAAM,gBAA1C,SAEI,cAAC,IAAD,CACIqC,MAAO,EACPC,IAAKrF,EAAKI,OAAOkE,MAEjBgB,SAAU,IACVC,UAAU,QAGlB,cAACL,EAAA,EAAD,CAAYrB,UAAWD,EAAQnC,MAAOsB,MAAM,gBAAgBoC,cAAY,EAAxE,SACI,sBAAMtB,UAAU,OAAhB,SAAwB,IAAI2B,KAAKxF,EAAKK,YAAYoF,mBAEtD,cAACP,EAAA,EAAD,CAAYQ,QAAQ,QAAQC,UAAU,OAAtC,4D,mBC/FT,SAASC,EAAT,GAAmC,IAAlB5F,EAAiB,EAAjBA,KAAML,EAAW,EAAXA,QAG1B,EAAgC4D,mBAAS,IAAzC,mBAAK7C,EAAL,KAAgBmF,EAAhB,KACAnC,qBAAU,YACQ,uCAAG,sBAAA9D,EAAA,kEACbiG,EADa,SACMrF,IADN,6EAAH,qDAIdmD,KACD,IAEH,IAAMmC,EACFpF,EAAUqF,OAEF,cAAC,IAAD,CACI/F,KAAM,CACFgG,OAAQtF,EAAUD,KAAI,qBAAGG,QACzBqF,SAAU,CAAC,CACPjG,KAAMU,EAAUD,KAAI,qBAAGP,aACvBgG,MAAO,WACPC,YAAa,OACbC,MAAM,EACNC,MAAO,SACR,CAGCrG,KAAMU,EAAUD,KAAI,qBAAGL,UACvB8F,MAAO,SACPC,YAAa,MACbC,MAAM,OAKZ,KAIZE,EACHtG,EAAKE,UAEI,cAAC,IAAD,CACIF,KAAM,CACFgG,OAAQ,CAAC,WAAY,YAAa,UAClCC,SAAU,CAAC,CACPC,MAAM,yBACNjE,gBAAiB,CACb,OACA,UACA,OAEJjC,KAAM,CAACA,EAAKE,UAAUoE,MAAOtE,EAAKG,UAAUmE,MAAOtE,EAAKI,OAAOkE,UAGvEiC,QAAS,CACLC,OAAQ,CAAE9E,SAAS,GACnBD,MAAO,CAAEC,SAAS,EAAM+E,KAAK,oBAAD,OAAsB9G,OAG1D,KAGZ,OADAW,QAAQC,IAAIZ,GACL,qBAAKkE,UAAU,QAAf,SACFlE,EAAUmG,EAAYQ,IChE/B,IAkEeI,EAlEH,WAIZ,MAA4BnD,mBAAS,IAArC,mBAAO5D,EAAP,KAAgBgH,EAAhB,KACE,EAAsBpD,mBAAS,CAC7BrD,UAAW,CAAE0G,MAAO,GACpBzG,UAAW,CAAEyG,MAAO,GACpBxG,OAAQ,CAAEwG,MAAO,GACjBvG,WAAY,CAAEuG,MAAO,KAJvB,mBAAK5G,EAAL,KAAW6G,EAAX,KAMAnD,qBAAU,YACK,uCAAG,4BAAA9D,EAAA,sEACIF,IADJ,OACVoH,EADU,OAEdD,EAAQC,GACRH,EAAW,UACXrG,QAAQC,IAAIP,GACZM,QAAQC,IAAIuG,GALE,2CAAH,qDAQbC,KACC,IAIJ,IAAIC,EAAmB,uCAAG,WAAOrH,GAAP,iBAAAC,EAAA,sEAEGF,IAFH,UAErBuH,EAFqB,OAGb,UAATtH,EAHsB,gBAIvBkH,EAAQI,GACRN,EAAW,UALY,wCAQAjH,EAAUC,GARV,QAQnBuH,EARmB,OASvBL,EAAQK,GACRP,EAAWhH,GAVY,4CAAH,sDAwBtB,OACE,gCACE,cAAC,EAAD,CAAQ2D,mBAAoB0D,IAC5B,cAACjC,EAAD,CAAS/E,KAAMA,IAEf,cAAC4F,EAAD,CAAO5F,KAAMA,EAAML,QAASA,QClDnBwH,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f316f7a0.chunk.js","sourcesContent":["import axios from \"axios\";\r\nlet url = 'https://covid19.mathdro.id/api'\r\n\r\n\r\nexport let fetchData = async(country) => {\r\n\r\n    let changeableURL = url;\r\n    if (country) {\r\n        changeableURL = `${url}/countries/${country}`\r\n        \r\n    }\r\n    try {\r\n        const { data } = await axios.get(changeableURL)\r\n        const modifiData = {\r\n            confirmed: data.confirmed,\r\n            recovered: data.recovered,\r\n            deaths: data.deaths,\r\n            lastUpdate: data.lastUpdate,\r\n\r\n        }\r\n        \r\n        console.log(data);\r\n        return modifiData;\r\n    } catch (error) {\r\n    }\r\n}\r\n\r\nexport let fetchDailyData = async function () {\r\n    try {\r\n        const { data } = await axios.get(`${url}/daily`)\r\n        const modifiData = data.map((dailyData) => ({\r\n            confirmed: dailyData.confirmed.total,\r\n            deaths: dailyData.deaths.total,\r\n            date: dailyData.reportDate\r\n        }))\r\n        return modifiData;\r\n    } catch (error) {\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nexport let countries = async function () {\r\n    try {\r\n\r\n        const { data : { countries} } = await axios.get(`${url}/countries`)\r\n\r\n        return countries.map((country) => country.name);\r\n       \r\n    \r\n    } catch (error) {\r\n        \r\n    }\r\n    \r\n}\r\n\r\n\r\n\r\n\r\n\r\n","\r\n\r\nimport React from 'react';\r\nimport './Navbar.css';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { alpha, makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\n/////////////////////\r\n\r\n\r\nimport { countries } from \"../api/index\";\r\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\n\r\n\r\n////////////////////\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n  root: {\r\n    flexGrow: 1,\r\n    background: 'balck'\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n    display: 'none',\r\n    [theme.breakpoints.up('sm')]: {\r\n      display: 'block',\r\n    },\r\n  },\r\n  search: {\r\n    position: 'relative',\r\n    borderRadius: theme.shape.borderRadius,\r\n    backgroundColor: alpha(theme.palette.common.white, 0.15),\r\n    '&:hover': {\r\n      backgroundColor: alpha(theme.palette.common.white, 0.25),\r\n    },\r\n    marginLeft: 0,\r\n    width: '100%',\r\n    [theme.breakpoints.up('sm')]: {\r\n      marginLeft: theme.spacing(1),\r\n      width: 'auto',\r\n    },\r\n  },\r\n  searchIcon: {\r\n    padding: theme.spacing(0, 2),\r\n    height: '100%',\r\n    position: 'absolute',\r\n    pointerEvents: 'none',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  inputRoot: {\r\n    color: 'inherit',\r\n  },\r\n  inputInput: {\r\n    padding: theme.spacing(1, 1, 1, 0),\r\n    // vertical padding + font size from searchIcon\r\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n    transition: theme.transitions.create('width'),\r\n    width: '100%',\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: '12ch',\r\n      '&:focus': {\r\n        width: '20ch',\r\n      },\r\n    },\r\n  },\r\n}));\r\n\r\n\r\n\r\nexport function Navbar({ handlCountryChange }) {\r\n  ////////////////////////\r\n\r\n  let [fetchedCountry, setfetchedCountry] = useState([])\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setfetchedCountry(await countries());\r\n\r\n    }\r\n    fetchAPI();\r\n  }, [setfetchedCountry])\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n\r\n          {/* <Typography className={classes.title}>\r\n          \r\n              COVID-19 Tracker App\r\n\r\n          </Typography> */}\r\n          <h1 className='header'>    COVID-19 Tracker App </h1>\r\n\r\n\r\n          <FormControl>\r\n          <NativeSelect className='country' defaultValue=\"\" onChange={(e) => handlCountryChange(e.target.value)}>\r\n          {/* <select name=\"\" id=\"\" className='country' defaultValue=\"\" onChange={(e) => handlCountryChange(e.target.value)}> */}\r\n\r\n\r\n            <option value=\"global\" className='option'>\r\n              Global\r\n            </option>\r\n            {fetchedCountry.map((country, i) => <option key={i} value={country}>{country}</option>)}\r\n          </NativeSelect>\r\n\r\n          </FormControl>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n","import Countup from \"react-countup\";\r\nimport React from 'react';\r\nimport \"./infoBox.css\"\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        minWidth: 275,\r\n    },\r\n    bullet: {\r\n        display: 'inline-block',\r\n        margin: '0 2px',\r\n        transform: 'scale(0.8)',\r\n    },\r\n    title: {\r\n        fontSize: 14,\r\n    },\r\n    pos: {\r\n        marginBottom: 12,\r\n    },\r\n});\r\n\r\n\r\nexport function InfoBox({ data }) {\r\n\r\n    const classes = useStyles();\r\n    const bull = <span className={classes.bullet}>•</span>;\r\n\r\n    return (\r\n        <Card className={classes.root}>\r\n            <CardContent className='confirmed'>\r\n                <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\r\n\r\n                    <span className='blue'>INFECTED</span>\r\n\r\n                </Typography>\r\n\r\n                <Typography className={classes.pos} color=\"textSecondary\">\r\n\r\n                    <Countup\r\n                        start={0}\r\n                        end={data.confirmed.value}\r\n                        duration={2.5}\r\n                        separator=',' />\r\n\r\n                </Typography>\r\n                <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\r\n                    <span className='date'>{new Date(data.lastUpdate).toDateString()}</span>\r\n                </Typography>\r\n                <Typography variant=\"body2\" component=\"span\">\r\n                    Numbers of the active casses of the COIVD-19\r\n                </Typography>\r\n            </CardContent>\r\n\r\n\r\n\r\n\r\n\r\n            <CardContent className='recovered'>\r\n                <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\r\n                    <span className='green'>RECOVERED</span>\r\n                </Typography>\r\n\r\n                <Typography className={classes.pos} color=\"textSecondary\">\r\n\r\n                    <Countup\r\n                        start={0}\r\n                        end={data.recovered.value}\r\n\r\n                        duration={2.5}\r\n                        separator=',' />\r\n\r\n                </Typography>\r\n                <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\r\n                    <span className='date'>{new Date(data.lastUpdate).toDateString()}</span>\r\n                </Typography>\r\n                <Typography variant=\"body2\" component=\"span\">\r\n                    Numbers of recoveries from  the COIVD-19\r\n                </Typography>\r\n            </CardContent>\r\n\r\n\r\n\r\n\r\n            <CardContent className='deaths'>\r\n                <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\r\n                    <span className='red'>DEATHS</span>                </Typography>\r\n\r\n                <Typography className={classes.pos} color=\"textSecondary\">\r\n\r\n                    <Countup\r\n                        start={0}\r\n                        end={data.deaths.value}\r\n\r\n                        duration={2.5}\r\n                        separator=',' />\r\n\r\n                </Typography>\r\n                <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\r\n                    <span className='date'>{new Date(data.lastUpdate).toDateString()}</span>\r\n                </Typography>\r\n                <Typography variant=\"body2\" component=\"span\">\r\n                    Numbers of the deaths caused by COIVD-19\r\n                </Typography>\r\n            </CardContent>\r\n\r\n        </Card>\r\n    );\r\n}\r\n\r\n\r\n// import React from 'react';\r\n// import useMediaQuery from '@material-ui/core/useMediaQuery';\r\n\r\n// export function InfoBox() {\r\n//   const matches = useMediaQuery('(min-width:600px)');\r\n\r\n//   return <span>{`(min-width:600px) matches: ${matches}`}</span>;\r\n// }\r\n\r\n\r\n","import { useEffect, useState } from \"react\";\r\nimport { fetchDailyData } from \"../api/index\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\nimport './chart.css';\r\n\r\n\r\n\r\n\r\nexport function Chart({ data, country }) {\r\n\r\n\r\n    let [dailyData, setDailyData] = useState([])\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setDailyData(await fetchDailyData());\r\n\r\n        }\r\n        fetchAPI();\r\n    }, [])\r\n\r\n    const lineChart = (\r\n        dailyData.length\r\n            ? (\r\n                <Line\r\n                    data={{\r\n                        labels: dailyData.map(({ date }) => date),\r\n                        datasets: [{\r\n                            data: dailyData.map(({ confirmed }) => confirmed),\r\n                            label: 'infected',\r\n                            borderColor: 'blue',\r\n                            fill: true,\r\n                            Color: 'white'\r\n                        }, {\r\n\r\n\r\n                            data: dailyData.map(({ deaths }) => deaths),\r\n                            label: 'Deaths',\r\n                            borderColor: 'red',\r\n                            fill: true\r\n\r\n                        }],\r\n                    }}\r\n\r\n                />) : null\r\n\r\n    )\r\n\r\n    const barChart = (\r\n       data.confirmed \r\n            ? (\r\n                <Bar\r\n                    data={{\r\n                        labels: ['infected', 'Recovered', 'Deaths'],\r\n                        datasets: [{\r\n                            label: `Graphic Representation`,\r\n                            backgroundColor: [\r\n                                \"blue\",\r\n                                \"#62ff00\",\r\n                                'red'\r\n                            ],\r\n                            data: [data.confirmed.value, data.recovered.value, data.deaths.value]\r\n                        }]\r\n                    }}\r\n                    options={{\r\n                        legend: { display: false },\r\n                        title: { display: true, text: `Current state in ${country}` },\r\n                    }}\r\n                />\r\n            ) : null\r\n    )\r\n    console.log(country);\r\n    return <div className='Chart'>\r\n        {country ? lineChart : barChart }\r\n\r\n        \r\n    </div>\r\n\r\n\r\n\r\n}","import './App.css';\nimport React, { useEffect, useState } from \"react\";\nimport { Navbar } from \"./Components/NavBar/Navbar\";\nimport { InfoBox } from \"./Components/infoBox/infoBox\";\nimport { fetchData } from \"./Components/api/index\";\nimport { Chart } from \"./Components/Chart/chart\";\n\n\nconst App = () => {\n\n\n  \nconst [country, setCountry]=useState(\"\");\n  let [data, setData] = useState({\n    confirmed: { vlaue: 0 },\n    recovered: { vlaue: 0 },\n    deaths: { vlaue: 0 },\n    lastUpdate: { vlaue: 0 },\n  })\n  useEffect(() => {\n    const getData = async () => {\n      let fetch = await fetchData();\n      setData(fetch)\n      setCountry(\"global\")\n      console.log(data);\n      console.log(fetch);\n\n    }\n    getData();\n  }, [])\n\n\n\n let handleCountryChange = async (country)=> {\n   \n  let fetchDataGlobal = await fetchData();\n  if(country==\"global\"){\n    setData(fetchDataGlobal)\n    setCountry(\"global\")\n    \n  }else{\n    let countryData= await fetchData(country)\n    setData(countryData);\n    setCountry(country)\n  }\n\n\n\n  }\n\n\n\n\n\n\n \n\n  return (\n    <div>\n      <Navbar handlCountryChange={handleCountryChange } />\n      <InfoBox data={data} />\n\n      <Chart data={data} country={country} />\n    </div>\n  )\n\n}\n\n\n\n\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}